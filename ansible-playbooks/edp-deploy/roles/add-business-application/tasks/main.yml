---
- name: "Get project CICD from env variable"
  shell: echo $PROJECT_CICD
  register: project_cicd_name

- name: "Get autouser secret name and gitlab URL from user-settings cm"
  shell: |
   {{ ocadm }} -n {{ project_cicd }} get cm user-settings -o=jsonpath='{ .data.gitlab_autouser_secret }'
  register: autouser_secret_name

- include_tasks: roles/common/tasks/get-gitlab-sshkey-from-secret.yml
  vars:
    gitlab_auto_user_secret: "{{ autouser_secret_name.stdout }}"
    project_cicd: "{{ project_cicd_name.stdout }}"

- name: "Get GitLab hostname and project path"
  set_fact:
     gitlab_hostname: "{{ git_repo_url | urlsplit('hostname') }}"
     gitlab_project_path: "{{ git_repo_url | urlsplit('path') | regex_replace('^/{1}', '') }}"
     gitlab_http_url: "{{ git_repo_url }}"
  when: git_repo_url is match("http?(s)://*")

- block:
  - name: "Using git hostname which was saved in configMap while EDP installation"
    shell: |
     {{ ocadm }} -n {{ project_cicd }} get cm user-settings -o=jsonpath='{ .data.gitlab_group_name_url }'
    register: git_repo_url_default

  - name: "Setting fact with default parameters"
    set_fact:
       gitlab_hostname: "{{ git_repo_url_default.stdout | urlsplit('hostname') }}"
       gitlab_project_path: "{{ git_repo_url_default.stdout | urlsplit('path') | regex_replace('^/{1}', '') }}"
       gitlab_project_name: "{{ git_repo_url }}"

  - name: "Setting fact with default parameters"
    set_fact:
       gitlab_http_url: "{{ git_repo_url_default.stdout + '/' + gitlab_project_name }}"
  when: git_repo_url is not match("http?(s)://*")

- name: "Register variable with repo URI"
  set_fact:
     git_repo_ssh_url: "{{ gitlab_hostname }}:{{ gitlab_project_path if git_repo_url is match('http?(s)://*')
     else gitlab_project_path + '/' + gitlab_project_name}}.git"

- name: "Clone GitLab repository"
  git:
    repo: "git@{{ git_repo_ssh_url }}"
    dest: "{{ work_dir }}/{{ project_gitlab_edp }}"
    key_file: "{{ work_dir }}/private.key"
    accept_hostkey: true
    force: true
  ignore_errors: true

- include_tasks: roles/common/tasks/clone-repository-to-gerrit.yml
  vars:
    gitlab_host: "{{ gitlab_hostname }}"
    project_cicd: "{{ project_cicd_name.stdout }}"

- name: "Save current replication configmap values"
  shell: |
    {{ ocadm }} get cm gerrit -n {{ project_cicd }} -o yaml
  register: old_replication_config

- local_action: copy content="{{ old_replication_config.stdout }}" dest="/tmp/replication-config"

- name: "Add replication part for new {{ project_cicd_name.stdout }} project"
  blockinfile:
    dest: /tmp/replication-config
    insertbefore: '  sshPort:*'
    block: "{{ lookup('template', 'replication-conf.j2') }}"
    marker: ""

- name: "Update replication config"
  shell: |
   {{ ocadm }} replace cm gerrit -n {{ project_cicd }} -f /tmp/replication-config

- name: "Redeploy Gerrit pod"
  shell: |
   {{ ocadm }} rollout latest gerrit -n {{ project_cicd }}

- include_tasks: update-app-settings.yml
  vars:
    gitlab_url: "{{ gitlab_http_url }}"

- name: "Create directory for business apps templates"
  file:
    path: "{{ templates_dir }}/business-apps"
    state: directory

- name: "Set full app name"
  set_fact:
     full_app_name: "{{ framework | lower }}-{{ app_name }}"

- name: "Copying template for {{ language }} {{ framework }} app"
  template:
    src: "../templates/business-applications/{{ language | lower }}/{{ framework | lower }}.j2"
    dest: "{{ templates_dir }}/business-apps/{{ full_app_name }}.yml"

- name: "Import template for new business-app"
  command: |
    {{ ocadm }} -n {{ project_cicd }} create -f {{ templates_dir }}/business-apps/{{ full_app_name }}.yml
  register: result
  ignore_errors: true
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'