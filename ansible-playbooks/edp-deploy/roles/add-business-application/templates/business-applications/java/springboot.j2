apiVersion: v1
kind: Template
metadata:
  name: "{{ app_name }}"
  annotations:
    iconClass: "spring"
    description: Openshift template for spring-boot application/service deploying
    template.openshift.io/provider-display-name: EPAM
    template.openshift.io/support-url: https://www.epam.com
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: "{{ app_name }}"
    labels:
      app: "{{ app_name }}"
  spec:
    ports:
    - name: "{{ app_name }}"
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app: "{{ app_name }}"
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "{{ app_name }}"
{% if route == 'true' %}
- apiVersion: v1
  kind: Route
  metadata:
    name: "{{ app_name }}"
    annotations:
      description: "Route for {{ app_name }} application"
    labels:
      app: "{{ app_name }}"
  spec:
    port:
      targetPort: 8000-tcp
    to:
      kind: Service
      name: "{{ app_name }}"
    wildcardPolicy: None
{% endif %}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "{{ app_name }}"
    labels:
      app: "{{ app_name }}"
  spec:
    replicas: 1
    selector:
      app: "{{ app_name }}"
    strategy:
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "{{ app_name }}"
      spec:
        serviceAccountName: "{{ app_name }}"
        containers:
        - name: "{{ project_cicd_name.stdout }}-{{ app_name }}"
          image: "docker-registry.default.svc:5000/${APP_IMAGE}:${APP_VERSION}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 5
          resources:
            requests:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
parameters:
- displayName: Application version
  name: APP_VERSION
  required: true
  value: "latest"
- displayName: Application image
  name: APP_IMAGE
  required: true