import groovy.json.*

def createPipeline(pipelineName, applicationName, pipelineScript, pipelinePath,  devopsRepository) {
    pipelineJob("${pipelineName}") {
        logRotator {
            numToKeep(10)
            daysToKeep(7)
        }
        triggers {
            gerrit {
                events {
                    if (pipelineName.contains("postcommit"))
                        changeMerged()
                    else
                        patchsetCreated()
                }
                project("plain:${applicationName}", ['ant:**'])
            }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        remote { url(devopsRepository) }
                        branches("master")
                        scriptPath("${pipelineScript}")
                    }
                }
                parameters {
                    stringParam("PIPELINES_PATH", "${pipelinePath}")
                    stringParam("GERRIT_PROJECT_NAME", "${applicationName}")
                }
            }
        }
    }
}

def appSettings = new File("${JENKINS_HOME}/app-settings/app.settings.json")
if (appSettings.exists()) {

    def slurper = new JsonSlurperClassic()
    def apps = slurper.parseText(appSettings.text)
    for (app in apps) {
        gerritSshPort = "${GERRIT_SSH_PORT}" ? "${GERRIT_SSH_PORT}" : {{ gerrit_ssh_port.stdout }}
        def applicationName = app.name
        def devopsRepository = "ssh://jenkins@gerrit:${gerritSshPort}/{{ project_gitlab_edp }}"
        def pipelinePath = 'application-pipelines/jenkins'

        createPipeline("Gerrit-precommit-${applicationName}", applicationName, "${pipelinePath}/Gerrit-precommit-pipeline.groovy", pipelinePath,  devopsRepository)
        createPipeline("Gerrit-postcommit-${applicationName}", applicationName, "${pipelinePath}/Gerrit-postcommit-pipeline.groovy", pipelinePath,  devopsRepository)
    }
}