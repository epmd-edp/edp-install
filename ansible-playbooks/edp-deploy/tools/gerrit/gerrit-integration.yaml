apiVersion: v1
kind: Template
labels:
  template: gerrit-post-configuration-template
metadata:
  name: gerrit-post-configuration
  #namespace: team-mb
  annotations:
    description: |-
          EDP Gerrit configuration to be applied.
          NOTE: You must have Gerrit and Jenkins available in your cluster to use this template.
    iconClass: icon-jenkins
    openshift.io/display-name: gerrit Configuration
    tags: ci-cd
    #template.openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/other_images/jenkins.html
    template.openshift.io/long-description: This template deploys a gerrit server
      capable of managing OpenShift Pipeline builds and supporting OpenShift-based
      oauth login.
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/support-url: https://access.redhat.com
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gerrit-integration
  data:
    config.sh: |
      set -ex
      ### Common step allow to work with gerrit over ssh
      mkdir -p ~/.ssh
      cat << EOF > ~/.ssh/config
      Host gerrit*
       HostName gerrit
       User admin
       StrictHostKeyChecking no
       UserKnownHostsFile /dev/null
       IdentityFile /var/gerrit/review_site/etc/admin/ssh-keys/id_admin_rsa
       IdentitiesOnly yes
      EOF
      # Configure git for user to allow working with git
      git config --global user.name  admin
      git config --global user.email admin@example.com
      ### end of common step

      ### Gerrit Configuration
      # add keys to admin user
      curl -X POST -u admin:secret -H "Content-Type: text/plain" \
        --data @/var/gerrit/review_site/etc/admin/ssh-keys/id_admin_rsa.pub \
        http://${GERRIT_HOST}:${GERRIT_PORT}/a/accounts/admin/sshkeys

      # Create groups in gerrit
      MANAGE_GERRIT="ssh -p ${GERRIT_SSH_PORT} admin@${GERRIT_HOST} gerrit"
      ${MANAGE_GERRIT} create-group --description \
        "'Grants all the permissions needed to set up a new project'" \
        --visible-to-all "'Project Bootstrappers'"
      ${MANAGE_GERRIT} create-group --description \
        "'Contains Jenkins and any other CI tools that get +2/-2 access on reviews'" \
        --visible-to-all "'Continuous Integration Tools'"

      # Create users in gerrit
      cat /opt/data/jenkins/.ssh/id_rsa.pub | ${MANAGE_GERRIT} create-account \
        --group "'Continuous Integration Tools'" --group "'Non-Interactive Users'" \
        --full-name "'Jenkins'" --http-password jenkins --ssh-key - jenkins

      cat /opt/data/jenkins/.ssh/id_rsa.pub | ${MANAGE_GERRIT} create-account \
        --group "'Project Bootstrappers'" --group "'Administrators'" \
        --full-name "'Project Creator'" --http-password bootstrapper --ssh-key - project-creator

      # Manage permissions
      cat << EOF > /tmp/all-Projects
      [project]
          description = Access inherited by all other projects.
      [receive]
          requireContributorAgreement = false
          requireSignedOffBy = false
          requireChangeId = true
      [submit]
          mergeContent = true
      [capability]
          accessDatabase = group Administrators
          administrateServer = group Administrators
          createProject = group Project Bootstrappers
          killTask = group Administrators
          priority = batch group Non-Interactive Users
          runAs = group Project Bootstrappers
          streamEvents = group Registered Users
      [access "refs/*"]
          create = group Project Bootstrappers
          forgeAuthor = group Registered Users
          forgeCommitter = group Project Bootstrappers
          push = +force group Project Bootstrappers
          pushMerge = group Project Bootstrappers
          pushSignedTag = group Project Bootstrappers
          pushTag = group Continuous Integration Tools
          pushTag = group Project Bootstrappers
          read = group Administrators
          read = group Anonymous Users
          editTopicName = group Registered Users
      [access "refs/drafts/*"]
          push = block group Registered Users
      [access "refs/for/refs/*"]
          push = group Registered Users
          pushMerge = group Administrators
      [access "refs/heads/*"]
          abandon = group Administrators
          abandon = group Change Owner
          abandon = group Project Bootstrappers
          label-Code-Review = -2..+2 group Administrators
          label-Code-Review = -2..+2 group Project Bootstrappers
          label-Code-Review = -1..+1 group Registered Users
          label-Verified = -2..+2 group Administrators
          label-Verified = -2..+2 group Continuous Integration Tools
          label-Verified = -2..+2 group Project Bootstrappers
          label-Workflow = -1..+1 group Administrators
          label-Workflow = -1..+0 group Change Owner
          label-Workflow = -1..+1 group Project Bootstrappers
          rebase = group Registered Users
          submit = group Administrators
          submit = group Continuous Integration Tools
          submit = group Project Bootstrappers
      [access "refs/meta/config"]
          read = group Project Owners
      [label "Code-Review"]
          abbreviation = R
          copyAllScoresOnTrivialRebase = true
          copyAllScoresIfNoCodeChange = true
          copyMinScore = true
          function = MaxWithBlock
          value = -2 This shall not be merged
          value = -1 This patch needs further work before it can be merged
          value = 0 No score
          value = +1 Looks good to me, but someone else must approve
          value = +2 Looks good to me, approved
      [label "Verified"]
          function = MaxWithBlock
          value = -2 Fails
          value = -1 Doesn't seem to work
          value = 0 No score
          value = +1 Works for me
          value = +2 Verified
      [label "Workflow"]
          function = MaxWithBlock
          value = -1 Work in progress
          value = 0 Ready for reviews
          value = +1 Approved
      EOF
      TMP_DIR="/tmp/all-projects-tmp"
      GIT_OPTIONS="--git-dir=${TMP_DIR}/.git --work-tree=${TMP_DIR}"
      PROJECT_ADDRESS=ssh://admin@${GERRIT_HOST}:${GERRIT_SSH_PORT}/All-Projects

      rm -rf ${TMP_DIR}
      git clone ${PROJECT_ADDRESS} ${TMP_DIR}

      git ${GIT_OPTIONS} fetch ${PROJECT_ADDRESS} \
        +refs/meta/config:refs/remotes/gerrit-meta/config
      git ${GIT_OPTIONS} remote update --prune
      git ${GIT_OPTIONS} checkout -B config remotes/gerrit-meta/config

      cp /tmp/all-Projects ${TMP_DIR}/project.config
      ${MANAGE_GERRIT} ls-groups -v | \
        awk '-F\t' '$1 != "Administrators" && $1 != "Non-Interactive Users" \
        {print $2,"\t",$1}' >> ${TMP_DIR}/groups

      echo -e 'global:Change-Owner\t\t\t\tChange Owner' >> ${TMP_DIR}/groups

      git ${GIT_OPTIONS} commit -a -m'Update project config.'
      git ${GIT_OPTIONS} push ${PROJECT_ADDRESS} HEAD:refs/meta/config

      rm -rf ${TMP_DIR}

      #change default gerrit admin password
      ${MANAGE_GERRIT} set-account --http-password ${GERRIT_PASSWORD} admin

      # Enable hideci.js
      cd /opt/data/gerrit_site/etc/
      git config -f gerrit.config 'commentlink.testresult.match' \
        '<p><a href="[^"]+job/([^/]+)/[0-9/]+" target="_blank" rel="nofollow">([^<]+)</a> : ([^ ]+)([^<]*)</p>'
      git config -f gerrit.config 'commentlink.testresult.html' \
        '<li class="comment_test"><span class="comment_test_name"><a href="$2" rel="nofollow">$1</a></span> <span class="comment_test_result"><span class="result_$3">$3</span>$4</span></li>'
      ### end of gerrit configuration

      ### Jenkins to Gerrit configuration
      # Create ssh config for Jenkins
      cat << EOF > /opt/data/jenkins/.ssh/config
      Host gerrit*
        HostName gerrit
        User jenkins
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        IdentityFile /var/lib/jenkins/.ssh/id_rsa
        IdentitiesOnly yes
      EOF
      ############ end

- apiVersion: batch/v1
  kind: Job
  metadata:
    name: gerrit-integration
  spec:
    parallelism: 1
    completions: 1
    template:
      metadata:
        name: gerrit-integration
      spec:
        initContainers:
        - name: init-jenkins
          image: busybox
          command: ["sh", "-c", "while ! nc -w 1 jenkins 8080 </dev/null; do echo waiting for Jenkins; sleep 10; done;"]
        - name: init-gerrit
          image: busybox
          command: ["sh", "-c", "while ! nc -w 1 gerrit 8080 </dev/null; do echo waiting for Gerrit; sleep 10; done;"]
        volumes:
        - name: gerrit-admin-secret-volume
          secret:
            secretName: gerrit-admin
            defaultMode: 256
        - name: python-script
          configMap:
            defaultMode: 420
            name: gerrit-integration
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins
        - name: gerrit-data
          persistentVolumeClaim:
            claimName: gerrit-data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - jenkins
              topologyKey: kubernetes.io/hostname
        containers:
        - name: gerrit-integration
          image: ${GERRIT_JOB_VERSION}
          imagePullPolicy: Always
          command: ["sh", "/tmp/config.sh"]
          env:
          - name: GERRIT_HOST
            value: gerrit
          - name: GERRIT_PORT
            value: "8080"
          - name: GERRIT_SSH_PORT
            valueFrom:
              configMapKeyRef:
                name: gerrit
                key: sshPort
          - name: GERRIT_ADMIN
            value: admin
          - name: GERRIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: gerrit-admin
                key: password
          - name: OPENSHIFT_PROJECT
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: APP_FILE
            value: "/tmp/config.sh"
          volumeMounts:
          - name: gerrit-admin-secret-volume
            mountPath: /var/gerrit/review_site/etc/admin/ssh-keys
          - mountPath: /tmp
            name: python-script
          - mountPath: /opt/data/jenkins
            name: jenkins-data
          - mountPath: /opt/data/gerrit_site
            name: gerrit-data
        restartPolicy: Never
        serviceAccount: gerrit
    backoffLimit: 1
parameters:
- displayName: Gerrit job version
  value: "docker-registry-default.main.edp.projects.epam.com/infra/edp-gerrit-job:latest"
  name: GERRIT_JOB_VERSION
