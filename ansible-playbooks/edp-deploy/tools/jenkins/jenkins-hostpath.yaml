apiVersion: v1
kind: Template
labels:
  template: edp-jenkins-persistent-hostpath-template
message: From jenkins-persistent-template. Adopted for hostpathfs
metadata:
  annotations:
    description: |-
      Jenkins service, with persistent storage.
      NOTE: You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-jenkins
    openshift.io/display-name: EDP Jenkins (Persistent - HostPath)
    tags: instant-app,jenkins
    template.openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/other_images/jenkins.html
    template.openshift.io/long-description: This template deploys a Jenkins server
      capable of managing OpenShift Pipeline builds and supporting OpenShift-based
      oauth login.
  name: edp-jenkins-persistent-hostpathfs
objects:
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      type: local
    name: jenkins
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    hostPath:
      path: ${JENKINS_HOST_PATH_VOLUME}
    storageClassName: manual
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: jenkins
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    storageClassName: manual
  volumeName: jenkins
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: maven-cache
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${JENKINS_MAVEN_CACHE_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
    name: ${JENKINS_SERVICE_NAME}
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${JENKINS_SERVICE_NAME}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: project-settings
  data:
    app.settings.json: |-
      []
    env.settings.json: |-
      []
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${JENKINS_SERVICE_NAME}-init
  data:
    init.groovy: |-
      //===========================
      // Base classes
      //===========================
      import jenkins.model.*
      import hudson.model.*
      import groovy.io.FileType
      //===========================
      // Global security classes
      //===========================
      import hudson.security.csrf.DefaultCrumbIssuer
      //===========================
      //===========================
      //Openshift sync plugin
      //==========================
      import io.fabric8.jenkins.openshiftsync.GlobalPluginConfiguration
      //===========================
      //Kubernetes plugin
      //===========================
      import org.csanchez.jenkins.plugins.kubernetes.*
      //===========================
      //Sonar plugin
      //===========================
      import hudson.plugins.sonar.*
      import hudson.plugins.sonar.model.*
      //===========================
      //Gerrit plugin
      //===========================
      import com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl;
      import com.sonyericsson.hudson.plugins.gerrit.trigger.GerritServer;
      import com.sonyericsson.hudson.plugins.gerrit.trigger.config.Config;
      import com.sonyericsson.hudson.plugins.gerrit.trigger.config.PluginConfig;
      //===========================
      def JENKINS_HOME = System.getenv().get('JENKINS_HOME')
      def GERRIT_SSH_PORT = System.getenv().get('GERRIT_SSH_PORT')
      file = new File("${JENKINS_HOME}/done.txt")

      if (file.exists()) {
        println "Configuration of Jenkins has been already done"
      }
      else {
      //===========================
      // Enabling Crumb
      //===========================
      def instance = Jenkins.instance
      instance.setCrumbIssuer(new DefaultCrumbIssuer(true))
      instance.save()

      //===========================
      // Modifying cloud Openshift that is located in Jenkins global configuration
      //===========================
      // Example of adding a new template*/
      //
      //PodTemplate p = new PodTemplate()
      //p.setName('test-template')
      //p.setLabel('test-template')
      //p.setRemoteFs('/home/jenkins')
      //
      //instance.clouds[0].addTemplate((PodTemplate) p)
      //
      //instance.save()
      //===========================
      def openshiftCloud = instance.clouds[0]
      def templates = openshiftCloud.getTemplates()
      def templatesRemove = []
      for (template in templates)
      {
        if (template.getName() =~  "^(nodejs|maven)") {
          templatesRemove.add(template)
        }
      }
      for (template in templatesRemove)
      {
        openshiftCloud.removeTemplate(template)
      }
      instance.save()
      //===========================
      // Deleting some plugins from base Openshift image
      //===========================
      //listPluginsToRemove = """"""
      //def plugins = listPluginsToRemove.trim().split('\n')
      //def pluginManager = instance.getPluginManager()
      //plugins.each {it ->
      //  def pluginName = it.split(':')[0]
      //  def pluginWrapperToUninstall = pluginManager.getPlugin(pluginName)
      //  pluginWrapperToUninstall.doDoUninstall()
      //}
      //instance.save()
      //instance.doSafeRestart()
      //===========================
      //===========================
      // Modifying Sonar Plugin for getting an ability to post-configure it via job
      //===========================
      SonarGlobalConfiguration sonarConf = Hudson.instance.getDescriptorByType(SonarGlobalConfiguration.class)
      def sinst = new SonarInstallation(
        "Sonar", // Name
        "http://sonar:9000",
        "5.3",
        "31fd1e3aebd44bc47a6caa9d274765a44ed82e5d", // Token
        "",
        "",
        "",
        "",
        "",
        new TriggersConfig(),
        "",
        "",
        "" // Additional Analysis Properties
      )
      sonarConf.setInstallations(sinst)
      sonarConf.save()
      //===========================
      //===========================
      // Modifying Gerrit Plugin for getting an ability to post-configure it via job
      //===========================

      PluginImpl plugin = PluginImpl.getInstance();

      server = new GerritServer("gerrit", false)

      PluginConfig pluginConfig = plugin.getPluginConfig();

      server.getConfig().setNumberOfSendingWorkerThreads(pluginConfig.getNumberOfSendingWorkerThreads());
      server.getConfig().setGerritHostName("gerrit")
      server.getConfig().setGerritFrontEndURL("http://gerrit:8080/")
      server.getConfig().setGerritAuthKeyFile(new File("${JENKINS_HOME}/.ssh/id_rsa"))
      server.getConfig().setGerritSshPort("${GERRIT_SSH_PORT}".toInteger())
      server.getConfig().setGerritUserName("jenkins")
      server.getConfig().setUseRestApi(true)
      server.getConfig().setGerritHttpUserName("jenkins")
      server.getConfig().setGerritHttpPassword("jenkins")
      server.getConfig().setRestCodeReview(true)
      server.getConfig().setRestVerified(true)

      plugin.addServer(server);
      server.start();
      plugin.save();
      //===========================
      //===========================
      // Generating keys for Gerrit exchange
      def cmd = [
        'bash',
        '-c',
        '''[ -d ${JENKINS_HOME}/.ssh ] && mkdir -p ${JENKINS_HOME}/.ssh
          |cat /dev/zero | ssh-keygen -b 4096 -t rsa -f ${JENKINS_HOME}/.ssh/id_rsa -C "jenkins@example.com" -q -N ""
          |'''.stripMargin() ]
      println cmd.execute().text
      //===========================
      //===========================
      // Creating a job dsl
      //===========================
      def jobName="jobsprovisioning"
      project = Jenkins.instance.createProject(FreeStyleProject, jobName)
      project.getBuildersList().clear()
      // Copy app settings
      def checkDir = "[[ -d ${JENKINS_HOME}/app-settings ]] || mkdir \"${JENKINS_HOME}/app-settings\"\n"
      def copyJson = $/oc get cm project-settings --template='{{ index .data "app.settings.json" }}' > ${JENKINS_HOME}/app-settings/app.settings.json/$
      project.buildersList.add(new Shell(checkDir + copyJson))

      executeDslScripts = new ExecuteDslScripts()

      def tTrigger = new TimerTrigger("H/5 * * * *")

      project.addTrigger((Trigger)tTrigger);
      executeDslScripts.setTargets("*.groovy")
      //executeDslScripts.setRemovedJobAction(RemovedJobAction.DELETE)
      //executeDslScripts.setRemovedViewAction(RemovedViewAction.DELETE)
      executeDslScripts.setLookupStrategy(LookupStrategy.JENKINS_ROOT)
      //executeDslScripts.setAdditionalClasspath("src/main/groovy")
      project.getBuildersList().add(executeDslScripts)
      project.save()
      project.scheduleBuild()

      cmd = [
        'bash',
        '-c',
        """set -x
           |[ ! -d ${JENKINS_HOME}/jobs/${jobName}/workspace ] && mkdir -p ${JENKINS_HOME}/jobs/${jobName}/workspace
           |cp ${JENKINS_HOME}/init.groovy.d/dsl/*.groovy ${JENKINS_HOME}/jobs/${jobName}/workspace/
           |""".stripMargin() ]
      println cmd.execute().text

      //================================
      String filename = "${JENKINS_HOME}/done.txt"
      boolean success = new File(filename).createNewFile()
      }
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${JENKINS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${JENKINS_SERVICE_NAME}
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 6000
    template:
      metadata:
        labels:
          name: ${JENKINS_SERVICE_NAME}
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: role
                  operator: In
                  values:
                  - jenkins-hp
        containers:
        - capabilities: {}
          env:
          - name: GERRIT_SSH_PORT
            valueFrom:
              configMapKeyRef:
                name: gerrit
                key: sshPort
          - name: OPENSHIFT_ENABLE_OAUTH
            value: ${JENKINS_ENABLE_OAUTH}
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          - name: INSTALL_PLUGINS
            value: "ace-editor:1.0.1,analysis-collector:1.52,analysis-core:1.92,authentication-tokens:1.1,branch-api:2.0.9,
            checkstyle:3.49,cloudbees-folder:6.0.4,conditional-buildstep:1.3.1,config-file-provider:2.16.2,credentials:2.1.13,
            dependency-check-jenkins-plugin:2.1.1,display-url-api:2.0,docker-commons:1.8,docker-workflow:1.9,durable-task:1.16,
            favorite:2.3.0,findbugs:4.71,gerrit-trigger:2.27.5,git-client:2.4.4,github-api:1.85.1,github-branch-source:2.0.8,
            github:1.26.0,git:3.5.0,git-server:1.5,handlebars:1.1,jackson2-api:2.7.3,jacoco:2.2.1,javadoc:1.0,job-dsl:1.60,
            jquery:1.11.2-0,junit:1.20,mapdb-api:1.0.1.0,matrix-auth:1.5,matrix-project:1.7.1,maven-plugin:2.14,mercurial:1.54,
            metrics:3.1.2.9,momentjs:1.1,parameterized-trigger:2.35.1,pipeline-build-step:2.5.1,pipeline-graph-analysis:1.3,
            pipeline-milestone-step:1.3,pipeline-model-api:1.1.4,pipeline-model-definition:1.1.4,pipeline-model-extensions:1.1.4,
            pipeline-stage-step:2.2,pipeline-stage-tags-metadata:1.1.4,pipeline-stage-view:2.4,plain-credentials:1.3,pmd:3.49,
            pubsub-light:1.8,run-condition:0.10,scm-api:2.1.1,sonar-gerrit:2.1,structs:1.7,subversion:2.9,token-macro:2.1,
            workflow-api:2.18,workflow-basic-steps:2.3,workflow-cps-global-lib:2.7,workflow-cps:2.39,workflow-durable-task-step:2.11,
            workflow-job:2.10,workflow-multibranch:2.14,workflow-remote-loader:1.2,workflow-scm-step:2.4,workflow-step-api:2.11,
            workflow-support:2.14,htmlpublisher:1.14,test-results-analyzer:0.3.4,sonar:2.6.1,blueocean-git-pipeline:1.4.0,
            blueocean-rest:1.4.0, greenballs:1.15,keycloak:2.2.0"
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          image: openshift/jenkins-2-centos7:latest
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 180
            timeoutSeconds: 10
          name: ${JENKINS_SERVICE_NAME}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
          - mountPath: /var/lib/jenkins/init.groovy.d/init.groovy
            subPath: init.groovy
            name: ${JENKINS_SERVICE_NAME}-init
          - mountPath: /var/lib/jenkins/scriptApproval.xml
            subPath: scriptApproval.xml
            name: ${JENKINS_SERVICE_NAME}-approval
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        serviceAccountName: ${JENKINS_SERVICE_NAME}
        volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-hp
        - name: ${JENKINS_SERVICE_NAME}-init
          configMap:
            defaultMode: 420
            name: ${JENKINS_SERVICE_NAME}-init
        - name: ${JENKINS_SERVICE_NAME}-approval
          configMap:
            defaultMode: 420
            name: ${JENKINS_SERVICE_NAME}-approval
        - name: job-dsl
          configMap:
            defaultMode: 420
            name: jobsprovisioning
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
    name: ${JENKINS_SERVICE_NAME}
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: ${JENKINS_SERVICE_NAME}-edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    name: jenkins-jnlp
  spec:
    ports:
    - name: agent
      nodePort: 0
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: ${JENKINS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp",
        "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    name: ${JENKINS_SERVICE_NAME}
  spec:
    ports:
    - name: web
      #nodePort: 0
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${JENKINS_SERVICE_NAME}
    sessionAffinity: None
    type: NodePort
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      role: ${JENKINS_SERVICE_NAME}-slave
    name: ${JENKINS_SERVICE_NAME}-slaves
  data:
    frontend-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>frontend</name>
        <namespace></namespace>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <slaveConnectTimeout>100</slaveConnectTimeout>
        <idleMinutes>60</idleMinutes>
        <activeDeadlineSeconds>0</activeDeadlineSeconds>
        <label>frontend</label>
        <serviceAccount>${JENKINS_SERVICE_NAME}</serviceAccount>
        <nodeSelector></nodeSelector>
        <nodeUsageMode>NORMAL</nodeUsageMode>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes/>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>${JENKINS_FRONTEND_IMAGE}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <envVars/>
            <ports/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    backend-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>backend</name>
        <namespace></namespace>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <slaveConnectTimeout>100</slaveConnectTimeout>
        <idleMinutes>5</idleMinutes>
        <activeDeadlineSeconds>0</activeDeadlineSeconds>
        <label>backend</label>
        <serviceAccount>${JENKINS_SERVICE_NAME}</serviceAccount>
        <nodeSelector></nodeSelector>
        <nodeUsageMode>NORMAL</nodeUsageMode>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes>
          <org.csanchez.jenkins.plugins.kubernetes.volumes.PersistentVolumeClaim>
            <mountPath>/opt/caches/maven</mountPath>
            <claimName>maven-cache</claimName>
            <readOnly>false</readOnly>
          </org.csanchez.jenkins.plugins.kubernetes.volumes.PersistentVolumeClaim>
        </volumes>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>${JENKINS_BACKEND_IMAGE}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <ports/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
#--------------------------------------------------------------------------------------
parameters:
- description: Password for the 'admin' account when using default Jenkin authentication.
  displayName: Jenkins admin initial password
  name: JENKINS_PASSWORD
  value: password
- description: The name of the OpenShift Service exposed for the Jenkins container.
  displayName: Jenkins Service Name
  name: JENKINS_SERVICE_NAME
  value: jenkins
- description: Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  displayName: Enable OAuth in Jenkins
  name: JENKINS_ENABLE_OAUTH
  value: "false"
- displayName: Maven Cache Volume Capacity
  description: Volume space available for maven cache data
  name: JENKINS_MAVEN_CACHE_VOLUME_CAPACITY
  required: true
  value: 5Gi
- description: Frontend docker image.
  displayName: Frontend docker image.
  name: JENKINS_FRONTEND_IMAGE
  value: "docker-registry.default.svc:5000/ci-cd/nodejs-slave:6.12.2"
- description: Backend docker image.
  displayName: Backend docker image.
  name: JENKINS_BACKEND_IMAGE
  value: "openshift/jenkins-slave-maven-centos7"
- description: HostPath volume path
  displayName: HostPath volume path
  name: JENKINS_HOST_PATH_VOLUME
  value: "/opt/data/jenkins"
