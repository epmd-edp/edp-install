# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

- block:
  - name: "Get autouser login from the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} get secret {{ vcs_auto_user_secret_name }}
     --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
    register: vcs_auto_user_login
    no_log: true

  - name: "Get autouser password from the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} get secret {{ vcs_auto_user_secret_name }}
     --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
    register: vcs_auto_user_password
    no_log: true

  - name: "Get autouser ssh private key from the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} get secret {{ vcs_auto_user_secret_name }}
     --template={% raw %}'{{ index .data "ssh-privatekey" }}'{% endraw %} | base64 --decode
    register: vcs_auto_user_ssh_privatekey
    no_log: true

  - name: "Set fact with VCS autouser credentials"
    set_fact:
       vcs_auto_user_login: "{{ vcs_auto_user_login.stdout }}"
       vcs_auto_user_password: "{{ vcs_auto_user_password.stdout }}"
       vcs_auto_user_ssh_privatekey: "{{ vcs_auto_user_ssh_privatekey.stdout }}"
    no_log: true

  - name: "Delete the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} delete secret {{ vcs_auto_user_secret_name }}
    register: result

  - name: "Create file with key"
    copy:
      content: "{{ vcs_auto_user_ssh_privatekey }}"
      dest: "/tmp/vcs-private.key"
      mode: 0400

  - name: "Create VCS Autouser secret"
    register: result
    ignore_errors: true
    command: |
      {{ ocadm }} -n {{ project_cicd }} create secret generic vcs-autouser
      --from-literal=username={{ vcs_auto_user_login }}
      --from-file=ssh-privatekey=/tmp/vcs-private.key
    changed_when: '"already" not in result.stderr'
    failed_when:
      - 'result.rc != 0'
      - '"already" not in result.stderr'
    no_log: true
  when: vcs_integration_enabled|bool == true

- block:
  - name: "Get perf username from the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} get secret {{ perf_user_secret_name }}
     --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
    register: perf_user_login
    no_log: true

  - name: "Get perf password from the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} get secret {{ perf_user_secret_name }}
     --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
    register: perf_user_password
    no_log: true

  - name: "Set fact with perf user credentials"
    set_fact:
       perf_user_login: "{{ perf_user_login.stdout }}"
       perf_user_password: "{{ perf_user_password.stdout }}"
    no_log: true

  - name: "Delete the temporary secret"
    shell: >
     {{ ocadm }} -n {{ edp_deploy_project }} delete secret {{ perf_user_secret_name }}
    register: result

  - name: "Create Perf user secret"
    register: result
    ignore_errors: true
    command: |
      {{ ocadm }} -n {{ project_cicd }} create secret generic perf-user
      --from-literal=username={{ perf_user_login }}
      --from-literal=password={{ perf_user_password }}
    changed_when: '"already" not in result.stderr'
    failed_when:
      - 'result.rc != 0'
      - '"already" not in result.stderr'
    no_log: true

  - name: "Create Sonar Perf user secret"
    register: result
    ignore_errors: true
    shell: >
      {{ ocadm }} -n {{ project_cicd }} create secret generic sonar-perf
      --from-literal=username=perf
      --from-literal=password={{ secrets.sonar_perf.password }}
    changed_when: '"already" not in result.stderr'
    failed_when:
      - 'result.rc != 0'
      - '"already" not in result.stderr'
    no_log: true

  - name: "Create Gerrit Perf user secret"
    register: result
    ignore_errors: true
    shell: >
      {{ ocadm }} -n {{ project_cicd }} create secret generic gerrit-perf
      --from-literal=username=perf
      --from-literal=password={{ secrets.gerrit_perf.password }}
    changed_when: '"already" not in result.stderr'
    failed_when:
      - 'result.rc != 0'
      - '"already" not in result.stderr'
    no_log: true

  - name: "Create Gitlab Perf user secret"
    register: result
    ignore_errors: true
    shell: >
      {{ ocadm }} -n {{ project_cicd }} create secret generic gitlab-perf
      --from-literal=username={{ vcs_auto_user_login }}
      --from-literal=password={{ vcs_auto_user_password }}
    changed_when: '"already" not in result.stderr'
    failed_when:
      - 'result.rc != 0'
      - '"already" not in result.stderr'
    no_log: true
    when: vcs_integration_enabled|bool == true and vcs_tool_name|lower == 'gitlab'
  when: perf_integration_enabled|bool == true

- name: "Create secret for Gerrit DB"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.gerrit.db_secret }}
    --from-literal=database-name={{ secrets.gerrit_db.db_name }}
    --from-literal=database-user={{ secrets.gerrit_db.db_user }}
    --from-literal=database-password={{ secrets.gerrit_db.db_password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Generate credential secret for gerrit client in keycloak"
  set_fact:
    gerrit_secret_uuid={{ 999999999999999999 | random | to_uuid() }}
  no_log: true

- name: "Create secret for CREDENTILAS-OAUTH for Gerrit"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic keycloak-gerrit
    --from-literal=secret={{ gerrit_secret_uuid }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Create secret for Sonar DB"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.sonar.db_secret }}
    --from-literal=database-name={{ secrets.sonar_db.db_name }}
    --from-literal=database-user={{ secrets.sonar_db.db_user }}
    --from-literal=database-password={{ secrets.sonar_db.db_password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Create secret for Sonar Admin"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.sonar.secret }}
    --from-literal=password={{ secrets.sonar_admin.password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Create secret for Nexus Admin"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.nexus.secret }}
    --from-literal=password={{ secrets.nexus_admin.password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Create secret for Gerrit Admin"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.gerrit.secret }}
    --from-literal=password={{ secrets.gerrit_admin.password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true

- name: "Create secret for Jenkins Admin"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ tools.jenkins.secret }}
    --from-literal=password={{ secrets.jenkins_admin.password }}
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  no_log: true
