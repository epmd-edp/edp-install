# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Creates work directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "~/.ssh"

- name: "Retrieve password from Secrets"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret {{ tools.jenkins.secret }}
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: jenkins_admin_password
  no_log: true

- include_tasks: jenkins-api/retrieve-token.yml
  with_items:
    - { username: 'admin', secret_name: 'jenkins-token' }

- name: "Get SSH key for jenkins user in gerrit"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret gerrit-ciuser
    --template={% raw %}'{{ index .data "id_rsa" }}'{% endraw %} | base64 --decode
  register: gerrit_ciuser_key
  no_log: true

- set_fact:
    tools: "{{ tools | combine({ 'jenkins': { 'admin_token': token }}, recursive=True) }}"
    jenkins_admin_token: true

- name: "Generate config ssh for jenkins"
  copy:
    content: |
      Host gerrit*
        HostName gerrit
        User jenkins
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        IdentityFile /var/lib/jenkins/.ssh/id_rsa
        IdentitiesOnly yes
    dest: ~/.ssh/jenkins_config
    force: no

- name: "Generate config ssh for jenkins"
  copy:
    content: "{{ gerrit_ciuser_key.stdout }}"
    dest: ~/.ssh/id_rsa
    mode: 0600
    force: no

- name: "Generate ssh key for jenkins-slave user"
  shell: cat /dev/zero | ssh-keygen -b 4096 -t rsa -f {{ post_integration_dir }}/jenkins/{{ item }} -C "jenkins-slave-edp@example.com" -q -N ""
  with_items:
    - "jenkins-slave-id_rsa"

- name: "Create secrets for jenkins-slave user"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ item.secret_name }}
    --from-file={{ item.configmap_key }}={{ post_integration_dir }}/jenkins/{{ item.sshkey }}
    --from-file={{ item.configmap_key }}.pub={{ post_integration_dir }}/jenkins/{{ item.sshkey }}.pub
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  with_items:
    - { secret_name: "jenkins-slave", configmap_key: "id_rsa" , sshkey: "jenkins-slave-id_rsa" }

- name: "Copy Jenkins files"
  template:
    src: "jenkins/{{ item }}"
    dest: "{{ post_integration_dir }}/jenkins/{{ item }}"
  with_items:
    - "configuration.groovy"
    - "role-based-auth.groovy"
    - "jobsprovisioning.groovy"
    - "scriptApproval.xml"
    - "init.groovy"

- name: "Create directories in jenkins pods"
  shell: "{{ ocadm }} exec -i $({{ jenkins_pod }}) -- bash -c 'mkdir -p /var/lib/jenkins/init.groovy.d/dsl /var/lib/jenkins/.ssh'"

- name: "Copy files to jenkins pod"
  shell: "{{ ocadm }} cp {{ item.src }} {{ project_cicd }}/$({{ jenkins_pod }}):{{ item.dest }}"
  with_items:
      - { src: "{{ post_integration_dir }}/jenkins/init.groovy", dest: "/var/lib/jenkins/init.groovy.d/init.groovy"}
      - { src: "{{ post_integration_dir }}/jenkins/configuration.groovy", dest: "/var/lib/jenkins/init.groovy.d/configuration.groovy"}
      - { src: "{{ post_integration_dir }}/jenkins/role-based-auth.groovy", dest: "/var/lib/jenkins/init.groovy.d/role-based-auth.groovy"}
      - { src: "{{ post_integration_dir }}/jenkins/jobsprovisioning.groovy", dest: "/var/lib/jenkins/init.groovy.d/dsl/jobsprovisioning.groovy"}
      - { src: "{{ post_integration_dir }}/jenkins/scriptApproval.xml", dest: "/var/lib/jenkins/scriptApproval.xml"}
      - { src: "~/.ssh/jenkins_config", dest: "/var/lib/jenkins/.ssh/config"}
      - { src: "~/.ssh/id_rsa", dest: "/var/lib/jenkins/.ssh/id_rsa"}
      - { src: "{{ post_integration_dir }}/jenkins/jenkins-slave-id_rsa", dest: "/var/lib/jenkins/.ssh/jenkins-slave-id_rsa"}

- include_tasks: jenkins-api/restart.yml

- name: "Retrieve ci user password for Nexus from Secrets"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret nexus-ci-credentials
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: nexus_ciuser_password
  no_log: true

- name: "Retrieve ci user login for Nexus from Secrets"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret nexus-ci-credentials
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: nexus_ciuser_username
  no_log: true

- include_tasks: jenkins-api/create-user.yml
  with_items:
    - { username: "{{ nexus_ciuser_username.stdout }}",
        password: "{{ nexus_ciuser_password.stdout }}",
        last_name: "Nexus",
        first_name: "User",
        jenkins_id: "nexus"}

- block:
  - include_tasks: jenkins-api/create-user.yml
    with_items:
      - { username: "perf",
          password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}",
          last_name: "Perf",
          first_name: "User",
          jenkins_id: "perf"}

  - include_tasks: jenkins-api/retrieve-token.yml
    with_items:
      - { username: "perf", secret_name: "jenkins-perf", field_name: "password" }

  - include_tasks: jenkins-api/assign-role-to-user.yml
    with_items:
      - { role: "read", username: "perf" }
  when: perf_integration_enabled|bool == true
