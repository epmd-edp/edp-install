# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: "Retrieve credentials from Secrets"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret {{ tools.sonar.secret }}
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: sonar_admin_password
  no_log: true

- name: "Retrieve ci user token from Secrets"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret sonar-ciuser-token
    --template={% raw %}'{{ index .data "token" }}'{% endraw %} | base64 --decode
  register: sonar_ciuser_token
  no_log: true

- name: "Retrieve read user token from Secrets"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret sonar-readuser-token
   --template={% raw %}'{{ index .data "token" }}'{% endraw %} | base64 --decode
  register: sonar_readuser_token
  no_log: true

- name: "Get username from security project Keycloak secret"
  shell: >
    {{ ocadm }} -n security get secret keycloak
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: username

- name: "Get password from security project Keycloak secret"
  shell: >
    {{ ocadm }} -n security get secret keycloak
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: password
  no_log: true

- name: "Get OIDC provider configuration"
  uri:
    url: "{{ tools.keycloak.web_url }}/auth/realms/{{ tools.keycloak.realm_name }}/.well-known/openid-configuration"
    method: GET
    return_content: yes
    user: "{{ username.stdout }}"
    password: "{{ password.stdout }}"
    force_basic_auth: "yes"
    status_code: 200
  register: result

- name: "Copy OIDC provider configuration to file"
  copy: content="{{ result.content }}" dest=/tmp/openid-configuration.json

- name: "Create config map for openid configuration"
  shell: "{{ ocadm }} -n {{ project_cicd }} create cm keycloak-sonaropenid-config --from-file=/tmp/openid-configuration.json"
