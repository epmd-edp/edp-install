# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

- name: "Get secret for gerrit client from keycloak"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret keycloak-gerrit
   --template={% raw %}'{{ index .data "secret" }}'{% endraw %} | base64 --decode
  register: keycloak_gerrit
  no_log: true

- set_fact:
    keycloak_gerrit_realm_secret: "{{ keycloak_gerrit.stdout }}"
  no_log: true

- name: "Get username from security project Keycloak secret"
  shell: >
   {{ ocadm }} -n security get secret keycloak
   --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: username

- name: "Get password from security project Keycloak secret"
  shell: >
   {{ ocadm }} -n security get secret keycloak
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: password
  no_log: true

- set_fact:
    keycloak_base_url: "http://keycloak.security:8080/auth"

- name: "Login to Keycloak and get token"
  uri:
    url: "{{ keycloak_base_url }}/realms/master/protocol/openid-connect/token"
    method: POST
    body: 'grant_type=password&username={{ username.stdout }}&password={{ password.stdout }}&client_id=admin-cli'
  register: access_token
  no_log: true

- set_fact:
    access_token: "{{ access_token.json.access_token }}"

- name: "Create realm for Keycloak"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body: "{{ lookup('template','./keycloak/edp-realm.json.j2') |to_json }}"
    body_format: json
    status_code: 201

- name: "Get {{ tools.keycloak.realm_name }} realm role master-create-realm"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/{{ tools.keycloak.realm_name }}/roles/master-create-realm"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: master_create_realm_role

- name: "Get {{ tools.keycloak.realm_name }} realm role administrator"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/{{ tools.keycloak.realm_name }}/roles/administrator"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: administrator_role

- name: "Get realm-management client representation"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/{{ tools.keycloak.realm_name }}/clients?clientId=realm-management"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: realm_management_client

- set_fact:
    id_client: "{{ realm_management_client.json[0].id }}"

- name: "Get realm-management client roles"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/{{ tools.keycloak.realm_name }}/clients/{{ id_client }}/roles/{{ item }}"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
  register: client_roles
  with_items:
    - "impersonation"
    - "manage-clients"
    - "view-authorization"
    - "view-events"
    - "view-identity-providers"
    - "view-realm"
    - "view-users"

- set_fact:
    client_roles_list: "{{ client_roles_list | default([]) + [ item.json | to_json ] }}"
  with_items: "{{ client_roles.results }}"
  no_log: true

- include_tasks: keycloak-api/manage-edp-super-admins.yml
  with_items: "{{ edp_super_admins }}"

- include_tasks: keycloak-api/manage-edp-admins.yml
  when: item != ""
  with_items: "{{ edp_admins }}"

- include_tasks: keycloak-api/manage-edp-viewers.yml
  when: item != ""
  with_items: "{{ edp_viewers }}"

- include_tasks: keycloak-api/configure-idp.yml
  with_items:
    - { client: "openshift-realm", realm: "openshift", redirect_uri: "*" }
    - { client: "master-realm", realm: "master", redirect_uri: "/auth/realms/master/broker/{{ full_edp_name }}/endpoint" }

- include_tasks: keycloak-api/add-mapper-to-idp.yml

- name: "Install Keycloak proxy to Nexus pod"
  include_tasks: keycloak-api/install-proxy.yml
  vars:
    upstream_resource: "nexus"
    client_id: "{{ tools.nexus.client_id }}"
    redirection_url: "{{ tools.nexus.web_url }}"
    upstream_port: 8081