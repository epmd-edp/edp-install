# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

- name: "Get client_id for sonar client for keycloak"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret sonar-is-credentials
    --template={% raw %}'{{ index .data "client_id" }}'{% endraw %} | base64 --decode
  register: sonar_client_id
  no_log: true

- name: "Get client_secret for sonar client for keycloak"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret sonar-is-credentials
    --template={% raw %}'{{ index .data "client_secret" }}'{% endraw %} | base64 --decode
  register: sonar_client_secret
  no_log: true

- name: "Get secret for gerrit client from keycloak"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret gerrit-is-credentials
    --template={% raw %}'{{ index .data "client_secret" }}'{% endraw %} | base64 --decode
  register: gerrit_client_secret
  no_log: true

- name: "Get username from security project Keycloak secret"
  shell: >
    {{ ocadm }} -n security get secret keycloak
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: username

- name: "Get password from security project Keycloak secret"
  shell: >
    {{ ocadm }} -n security get secret keycloak
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: password
  no_log: true

- name: "Get username for Admin Console Reader"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-reader
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: ac_reader_username

- name: "Get password for Admin Console Reader"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-reader
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: ac_reader_password
  no_log: true

- name: "Get username for Admin Console Creator"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-creator
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: ac_creator_username

- name: "Get password for Admin Console Creator"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-creator
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: ac_creator_password
  no_log: true

- name: "Get username for Admin Console Keycloak Client"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-client
    --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: ac_keycloak_client_id

- name: "Get password for Admin Console Keycloak Client"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret admin-console-client
    --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: ac_keycloak_client_secret
  no_log: true

- name: "Get id for nexus client for keycloak"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} get secret nexus-is-credentials
    --template={% raw %}'{{ index .data "client_id" }}'{% endraw %} | base64 --decode
  register: nexus_client_id
  no_log: true

- set_fact:
    nexus_client_id: "{{ nexus_client_id.stdout }}"
    sonar_client_id: "{{ sonar_client_id.stdout }}"
    sonar_client_secret: "{{ sonar_client_secret.stdout }}"
    gerrit_client_secret: "{{ gerrit_client_secret.stdout }}"
    ac_reader_username: "{{ ac_reader_username.stdout }}"
    ac_reader_password: "{{ ac_reader_password.stdout }}"
    ac_creator_username: "{{ ac_creator_username.stdout }}"
    ac_creator_password: "{{ ac_creator_password.stdout }}"
    ac_keycloak_client_id: "{{ ac_keycloak_client_id.stdout }}"
    ac_keycloak_client_secret: "{{ ac_keycloak_client_secret.stdout }}"
    keycloak_base_url: "http://keycloak.security:8080/auth"
  no_log: true

- name: "Login to Keycloak and get token"
  uri:
    url: "{{ keycloak_base_url }}/realms/master/protocol/openid-connect/token"
    method: POST
    body: 'grant_type=password&username={{ username.stdout }}&password={{ password.stdout }}&client_id=admin-cli'
  register: access_token
  no_log: true

- set_fact:
    access_token: "{{ access_token.json.access_token }}"
  no_log: true

- set_fact:
    edp_client_secret: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
  no_log: true

- name: "Create realm for Keycloak"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body: "{{ lookup('template','./keycloak/edp-realm.json.j2') |to_json }}"
    body_format: json
    status_code: 201

- name: "Create edp client in openshift realm"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/openshift/clients"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body: "{{ lookup('template','roles/post-integration/templates/keycloak/edp-client.json.j2') |to_json }}"
    body_format: json
    status_code: 201
  register: result

- set_fact:
    edp_client_location: "{{ result.location }}"
    edp_client_id: "{{ result.location.split('/')[-1] }}"

- name: "Create role administrator for edp client in openshift realm"
  uri:
    url: "{{ edp_client_location }}/roles"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body:
      name: "administrator"
    body_format: json
    status_code: 201
  register: result

- set_fact:
    edp_admin_role_location: "{{ result.location }}"

- name: "Get role administrator for edp client in openshift realm"
  uri:
    url: "{{ edp_admin_role_location }}"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: admin_role

- name: "Create role developer for edp client in openshift realm"
  uri:
    url: "{{ edp_client_location }}/roles"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body:
      name: "developer"
    body_format: json
    status_code: 201
  register: result

- set_fact:
    edp_dev_role_location: "{{ result.location }}"

- name: "Get role developer for edp client in openshift realm"
  uri:
    url: "{{ edp_dev_role_location }}"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: dev_role

- name: "Get master client from openshift realm"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/openshift/clients?clientId=master"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: master_clients_response

- set_fact:
    master_client_id: "{{ master_clients_response.json[0].id }}"

- name: "Get role developer for edp client in openshift realm"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/openshift/clients/{{ master_client_id }}/roles/create-realm"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: create_realm_role

- include_tasks: keycloak-api/manage-edp-super-admins.yml
  with_items: "{{ edp_super_admins }}"

- include_tasks: keycloak-api/manage-edp-admins.yml
  when: item != ""
  with_items: "{{ edp_admins }}"

- include_tasks: keycloak-api/manage-edp-viewers.yml
  when: item != ""
  with_items: "{{ edp_viewers }}"

- name: "Install Keycloak secret for admin connection"
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic keycloak-main-secret
    --from-literal=username={{ username.stdout }}
    --from-literal=password={{ password.stdout }}
  ignore_errors: true

- set_fact:
    keycloak_super_admins: "{{ keycloak_super_admins | default([]) + [ { 'username': item } ] }}"
  when: item != ""
  with_items:
    - "{{ edp_super_admins }}"

- set_fact:
    keycloak_admins: "{{ keycloak_admins | default([]) + [ { 'username': item } ] }}"
  when: item != ""
  with_items:
    - "{{ edp_admins }}"

- set_fact:
    keycloak_developers: "{{ keycloak_developers | default([]) + [ { 'username': item } ] }}"
  with_items:
    - "{{ edp_viewers }}"

- name: "Create directory for Keycloak templates"
  file:
    path: "{{ templates_dir }}/keycloak"
    state: directory

- name: "Copy Keycloak template"
  template:
    src: "keycloak/keycloak-cr.yaml"
    dest: "{{ templates_dir}}/keycloak/keycloak-cr.yaml"

- name: "Install Keycloak CR"
  command: |
    {{ ocadm }} -n {{ project_cicd }} apply -f {{ templates_dir}}/keycloak/keycloak-cr.yaml
  ignore_errors: true