# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

- name: "Get secret for gerrit client from keycloak"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret keycloak-gerrit
   --template={% raw %}'{{ index .data "secret" }}'{% endraw %} | base64 --decode
  register: keycloak_gerrit
  no_log: true

- set_fact:
    keycloak_gerrit_realm_secret: "{{ keycloak_gerrit.stdout }}"
  no_log: true

- name: "Get username from security project Keycloak secret"
  shell: >
   {{ ocadm }} -n security get secret keycloak
   --template={% raw %}'{{ index .data "username" }}'{% endraw %} | base64 --decode
  register: username

- name: "Get password from security project Keycloak secret"
  shell: >
   {{ ocadm }} -n security get secret keycloak
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: password
  no_log: true

- set_fact:
    keycloak_base_url: "http://keycloak.security:8080/auth"

- name: "Login to Keycloak and get token"
  uri:
    url: "{{ keycloak_base_url }}/realms/master/protocol/openid-connect/token"
    method: POST
    body: 'grant_type=password&username={{ username.stdout }}&password={{ password.stdout }}&client_id=admin-cli'
  register: access_token
  no_log: true

- set_fact:
    access_token: "{{ access_token.json.access_token }}"

- name: "Create realm for Keycloak"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body: "{{ lookup('template','./keycloak/edp-realm.json.j2') |to_json }}"
    body_format: json
    status_code: 201

- name: "Create credential for Keycloak EDP admin"
  set_fact:
    keycloak_edp_admin: "admin-{{ full_edp_name }}"
    keycloak_edp_admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
  no_log: true

- name: "Create secret for Keycloak EDP admin"
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic keycloak-admin
    --from-literal=username={{ keycloak_edp_admin }}
    --from-literal=password={{ keycloak_edp_admin_password }}
  no_log: true

- name: "Create admin user for EDP in Keycloak"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/master/users"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    body: "{{ lookup('template','./keycloak/edp-admin.json.j2') |to_json }}"
    body_format: json
    status_code: 201
  register: user

- name: "Get realm role"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/master/roles/create-realm"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: create_realm_role

- set_fact:
    list_roles: "[ {{ create_realm_role.json | to_json }} ]"

- name: "Assign realm role"
  uri:
    url: "{{ user.location }}/role-mappings/realm"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: 204
    body: "{{ list_roles }}"
    body_format: json

- name: "Get EDP clients"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/master/clients?clientId={{ full_edp_name }}-realm"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: edp_clients

- set_fact:
    id_client: "{{ edp_clients.json[0].id }}"

- name: "Get client roles"
  uri:
    url: "{{ keycloak_base_url }}/admin/realms/master/clients/{{ id_client }}/roles"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
    status_code: 200
  register: client_roles

- name: "Assign client role"
  uri:
    url: "{{ user.location }}/role-mappings/clients/{{ id_client }}"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: 204
    body: "{{ client_roles.json }}"
    body_format: json

- name: "Install Keycloak proxy to Nexus pod"
  include_tasks: keycloak-api/install-proxy.yml
  vars:
    upstream_resource: "nexus"
    client_id: "{{ tools.nexus.client_id }}"
    redirection_url: "{{ tools.nexus.web_url }}"
    upstream_port: 8081