# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: "Retrieve password from Secrets"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret {{ tools.gerrit.secret }}
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: gerrit_admin_password
  no_log: true

- name: "Retrieve perf password from Secrets"
  shell: >
   {{ ocadm }} -n {{ project_cicd }} get secret gerrit-perf
   --template={% raw %}'{{ index .data "password" }}'{% endraw %} | base64 --decode
  register: gerrit_perf_password
  no_log: true

- name: Creates work directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "~/.ssh"
    - "{{ post_integration_dir }}/gerrit/all-projects"

- stat:
    path: "{{ post_integration_dir }}/gerrit/gerrit_admin_rsa"
  register: gerrit_key

- name: "Prepare sql script for gerrit admin creation"
  template:
    src: "gerrit/gerrit-admin-user.sql.j2"
    dest: "{{ post_integration_dir }}/gerrit/gerrit-admin-user.sql"

- name: "Copy files to gerrit-db pod"
  shell: "{{ ocadm }} cp {{ item.src }} {{ project_cicd }}/$({{ gerrit_db_pod }}):{{ item.dest }}"
  with_items:
    - { src: "{{ post_integration_dir }}/gerrit/gerrit-admin-user.sql", dest: "/tmp/gerrit-admin-user.sql"}

- name: "Run sql script in gerrit-db pod"
  shell: "{{ ocadm }} exec -i $({{ gerrit_db_pod }}) -- psql --dbname={{ secrets.gerrit_db.db_name }} --file=/tmp/gerrit-admin-user.sql -U gerrit"

- name: "Generate ssh keys for gerrit users"
  shell: cat /dev/zero | ssh-keygen -b 4096 -t rsa -f {{ post_integration_dir }}/gerrit/{{ item }} -C "edp@example.com" -q -N ""
  when: gerrit_key.stat.islnk is not defined
  with_items:
    - "gerrit_admin_rsa"
    - "gerrit_project-creator_rsa"

- name: "Create secrets for gerrit users"
  register: result
  ignore_errors: true
  command: |
    {{ ocadm }} -n {{ project_cicd }} create secret generic {{ item.secret_name }}
    --from-file={{ item.configmap_key }}={{ post_integration_dir }}/gerrit/{{ item.sshkey }}
    --from-file={{ item.configmap_key }}.pub={{ post_integration_dir }}/gerrit/{{ item.sshkey }}.pub
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'
  with_items:
    - { secret_name: "gerrit-admin", configmap_key: "id_rsa" , sshkey: "gerrit_admin_rsa" }
    - { secret_name: "gerrit-project-creator", configmap_key: "id_rsa" , sshkey: "gerrit_project-creator_rsa" }
  no_log: true

- include_tasks: roles/api/vcs/generate-ssh-config.yml
  vars:
    gerrit_username: "admin"

- name: "Copy hideci files"
  copy:
    src: "gerrit/{{ item }}"
    dest: "{{ post_integration_dir }}/gerrit/{{ item }}"
  with_items:
    - hideci.js
    - jquery-visibility.js
    - jquery-1.7.2.min.js
    - GerritSiteHeader.html
    - GerritSite.css

- name: "Copy files to gerrit pod"
  shell: "{{ ocadm }} cp {{ item.src }} {{ project_cicd }}/$({{ gerrit_pod }}):{{ item.dest }}"
  with_items:
      - { src: "{{ post_integration_dir }}/gerrit/hideci.js", dest: "/var/gerrit/review_site/static/hideci.js"}
      - { src: "{{ post_integration_dir }}/gerrit/jquery-visibility.js", dest: "/var/gerrit/review_site/static/jquery-visibility.js"}
      - { src: "{{ post_integration_dir }}/gerrit/jquery-1.7.2.min.js", dest: "/var/gerrit/review_site/static/jquery-1.7.2.min.js"}
      - { src: "{{ post_integration_dir }}/gerrit/GerritSiteHeader.html", dest: "/var/gerrit/review_site/etc/GerritSiteHeader.html"}
      - { src: "{{ post_integration_dir }}/gerrit/GerritSite.css", dest: "/var/gerrit/review_site/etc/GerritSite.css"}

- name: "Copy files to gerrit pod"
  shell: "{{ ocadm }} cp {{ item.src }} {{ project_cicd }}/$({{ gerrit_pod }}):{{ item.dest }}"
  with_items:
    - { src: "{{ vcs_key_path }}", dest: "/var/gerrit/review_site/etc/replication_rsa_key"}
  when: vcs_integration_enabled|bool == true

- name: "Chown gerrit directory with gerrit2 user in gerrit pod"
  shell: "{{ ocadm }} exec -i $({{ gerrit_pod }}) -- chown -R gerrit2:gerrit2 /var/gerrit/review_site"

- include_tasks: gerrit-api/add-sshkey-to-user.yml
  with_items:
    - { login: "admin", sshkey: "{{ post_integration_dir }}/gerrit/gerrit_admin_rsa.pub" }

- include_tasks: gerrit-cli/create-group.yml
  with_items:
    - { name: "Project Bootstrappers", description: "Grants all the permissions needed to set up a new project" }
    - { name: "Continuous Integration Tools", description: "Contains Jenkins and any other CI tools that get +2/-2 access on reviews" }

- name: "Create ssh key for Gerrit in Jenkins"
  shell: "{{ item }}"
  with_items:
    - "{{ ocadm }} exec -i $({{ jenkins_pod }}) -- bash -c '[ -f $JENKINS_HOME/.ssh/id_rsa ] || ssh-keygen -b 4096 -t rsa -f $JENKINS_HOME/.ssh/id_rsa -q -N \"\"'"
    - "{{ ocadm }} exec -i $({{ jenkins_pod }}) -- bash -c 'cat $JENKINS_HOME/.ssh/id_rsa.pub' > {{ post_integration_dir }}/gerrit/gerrit_jenkins_rsa.pub"

- set_fact:
    gerrit_admins: "{{ gerrit_admins | default([]) + [ { 'username': item, 'group': 'Administrators', 'full_name': item } ] }}"
  when: item != ""
  with_items:
    - "{{ edp_super_admins }}"
    - "{{ edp_admins }}"

- include_tasks: gerrit-cli/create-user.yml
  with_items:
    - { username: "jenkins", password: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters') }}", full_name: "CI Jenkins" }
    - { username: "project-creator", password: "{{ lookup('password', '/dev/null length=11 chars=ascii_letters') }}", full_name: "Project Creator" }
    - "{{ gerrit_admins }}"

- include_tasks: gerrit-api/add-sshkey-to-user.yml
  with_items:
    - { login: "jenkins", sshkey: "{{ post_integration_dir }}/gerrit/gerrit_jenkins_rsa.pub" }
    - { login: "project-creator", sshkey: "{{ post_integration_dir }}/gerrit/gerrit_project-creator_rsa.pub" }

- include_tasks: gerrit-cli/add-user-to-group.yml
  with_items:
    - { login: "jenkins", group: "Continuous Integration Tools" }
    - { login: "jenkins", group: "Non-Interactive Users" }
    - { login: "project-creator", group: "Administrators" }
    - { login: "project-creator", group: "Project Bootstrappers" }

- name: "Reset gerrit admin http_password"
  include_tasks: gerrit-cli/set-password.yml
  with_items:
    - { username: "admin", password: "{{ gerrit_admin_password.stdout }}" }

- name: "Initialize Gerrit All-Projects"
  shell: "git init {{ post_integration_dir }}/gerrit/all-projects"

- name: "Checkout Gerrit config"
  shell: "{{ item }}"
  with_items:
    - "git config user.name  admin"
    - "git config user.email {{ secrets.gerrit_admin.email }}"
    - "git remote add origin ssh://admin@gerrit.{{ project_cicd }}:{{ gerrit_ssh_port }}/All-Projects"
    - "git fetch -q origin refs/meta/config:refs/remotes/origin/meta/config"
    - "git checkout meta/config"
  changed_when: "'already exists' not in result.stderr"
  register: result
  failed_when:
    - "result.rc != 0"
    - "'already exists' not in result.stderr"
  args:
    chdir: "{{ post_integration_dir }}/gerrit/all-projects"

- name: "Update Gerrit config"
  template:
    src: "gerrit/gerrit.config"
    dest: "{{ post_integration_dir }}/gerrit/all-projects/project.config"

- include_tasks: gerrit-cli/add-to-groups-file.yml
  with_items:
    - "Project Bootstrappers"
    - "Continuous Integration Tools"

- name: "Create perf user with http_password"
  include_tasks: gerrit-cli/create-user.yml
  with_items:
    - { username: "perf",
        password: "{{ gerrit_perf_password.stdout }}",
        full_name: "Perf Integration",
        group: "Non-Interactive Users" }
  when: perf_integration_enabled|bool == true

- name: "Add Change-Owner group in groups file"
  lineinfile:
    path: "{{ post_integration_dir }}/gerrit/all-projects/groups"
    line: "global:Change-Owner\tChange Owner"
    state: present

- name: "Push new Gerrit config"
  shell: "{{ item }}"
  with_items:
    - "git commit -a -m 'Uploaded EDP Gerrit config'"
    - "git push origin meta/config:meta/config"
  changed_when: "'nothing to commit' not in result.stdout"
  register: result
  failed_when:
    - "result.rc != 0"
    - "'nothing to commit' not in result.stdout"
  args:
    chdir: "{{ post_integration_dir }}/gerrit/all-projects"

- name: "Add keycloak as trustedOpenID"
  shell: |
    {{ ocadm }} exec -i $({{ gerrit_pod }}) -- bash -c 'git config -f /var/gerrit/review_site/etc/gerrit.config auth.trustedOpenID ^.*$'

#- name: "Enable hideci.js"
#  shell: "{{ item }}"
#  with_items:
#    - >
#    "oc exec -i $({{ gerrit_pod }}) -- bash -c 'git config -f /opt/data/gerrit_site/etc/gerrit.config
#     'commentlink.testresult.match' <p><a href=\"[\^\"]+job/([\^/]+)/[0-9/]+\" target=\"_blank\" rel=\"nofollow\">([\^\<]+)</a> : ([^ ]+)([^<]*)</p>'"
#    - >
#    "oc exec -i $({{ gerrit_pod }}) -- bash -c 'git config -f /opt/data/gerrit_site/etc/gerrit.config
#    'commentlink.testresult.html' <li class=\"comment_test\"><span class=\"comment_test_name\">
#    <a href=\"$2\" rel=\"nofollow\">$1</a></span> <span class=\"comment_test_result\"><span class=\"result_$3\">$3</span>$4</span></li>"

- include_tasks: roles/common/tasks/manage-gerrit/create-gerrit-project.yml
  vars:
    name: "{{ full_edp_name }}"
    initial_commit: true

- include_tasks: roles/api/git/clone.yml
  with_items:
  - { repo: "ssh://admin@gerrit.{{ project_cicd }}:{{ gerrit_ssh_port }}/{{ full_edp_name }}", 'dest': "{{ work_dir }}/{{ full_edp_name }}" }

- include_tasks: roles/api/git/set-config.yml
  with_items:
  - { git_directory: '{{ work_dir }}/{{ full_edp_name }}', user_email: "admin@epam-edp.com", user_name: "admin" }

- name: "Copying EDP sources"
  synchronize:
    src: "../{{ item }}"
    dest: "{{ work_dir }}/{{ full_edp_name }}"
  with_items:
  - "ansible-playbooks"
  - "application-pipelines"
  - "edp-images"
  - "oc-templates"
  - "README.md"
  - "LICENSE-2.0"

- include_tasks: roles/api/git/commit.yml
  with_items:
  - { git_directory: '{{ work_dir }}/{{ full_edp_name }}', commit_message: "Initial commit with EDP sources" }

- include_tasks: roles/common/tasks/manage-gerrit/push-to-gerrit.yml
  vars:
    target_dir: "{{ work_dir }}/{{ full_edp_name }}"
    name: "{{ full_edp_name }}"
    gerrit_username: "admin"

- name: "Checkout EDP project config"
  shell: "{{ item }}"
  with_items:
    - "git fetch -q origin refs/meta/config:refs/remotes/origin/meta/config"
    - "git checkout meta/config"
  changed_when: "'already exists' not in result.stderr"
  register: result
  failed_when:
    - "result.rc != 0"
    - "'already exists' not in result.stderr"
  args:
    chdir: "{{ work_dir }}/{{ full_edp_name }}"

- name: "Update EDP project config"
  template:
    src: "gerrit/edp_project.config"
    dest: "{{ work_dir }}/{{ full_edp_name }}/project.config"

- name: "Push new EDP project config"
  shell: "{{ item }}"
  with_items:
    - "git commit -a -m 'Uploaded EDP project config'"
    - "git push origin meta/config:meta/config"
  changed_when: "'nothing to commit' not in result.stdout"
  register: result
  failed_when:
    - "result.rc != 0"
    - "'nothing to commit' not in result.stdout"
  args:
    chdir: "{{ work_dir }}/{{ full_edp_name }}"
