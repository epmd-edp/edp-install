apiVersion: v1
kind: Template
metadata:
  name: "{{ name }}"
  annotations:
    iconClass: icon-jenkins
    description: Openshift template for RebbitMQ service
    template.openshift.io/provider-display-name: EPAM
    template.openshift.io/support-url: https://www.epam.com
objects:
{% if item_map.storage is defined %}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "{{ name }}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "{{ item_map.storage.capacity }}"
    storageClassName: "{{ item_map.storage.class }}"
{% endif %}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: "Route for {{ name }} service."
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    to:
      kind: Service
      name: "{{ name }}"
    port:
      targetPort: managment
- apiVersion: v1
  kind: Service
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    ports:
    - name: listener
      port: 5672
    - name: managment
      port: 15672
    selector:
      app: "{{ name }}"
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "{{ name }}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    replicas: 1
    selector:
      app: "{{ name }}"
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "{{ name }}"
      spec:
        serviceAccountName: "{{ name }}"
        containers:
        - name: "{{ name }}"
          image: "${SERVICE_IMAGE}:${SERVICE_VERSION}"
          imagePullPolicy: Always
          ports:
            - name: listener
              containerPort: 5672
            - name: managment
              containerPort: 15672
          env:
            - name: RABBITMQ_NODENAME
              value: "{{ name }}"
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 5672
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 5672
            timeoutSeconds: 5
          resources:
            requests:
              memory: 1Gi
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: "{{ name }}-data"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        volumes:
        - name: "{{ name }}-data"
{% if item_map.storage is defined %}
          persistentVolumeClaim:
            claimName: "{{ name }}-data"
{% else %}
          emptyDir: {}
{% endif %}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
parameters:
- displayName: Service version
  name: SERVICE_VERSION
  required: true
  value: "{{ item_map.version }}"
- displayName: Service image
  name: SERVICE_IMAGE
  required: true
  value: "{{ item_map.image }}"