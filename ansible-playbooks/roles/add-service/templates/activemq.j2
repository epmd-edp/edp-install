# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Template
metadata:
  name: "{{ name }}"
  annotations:
    iconClass: icon-jenkins
    description: Openshift template for ActiveMQ service
    template.openshift.io/provider-display-name: EPAM
    template.openshift.io/support-url: https://www.epam.com
objects:
{% if item_map.storage is defined %}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "{{ name }}-conf"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "{{ item_map.storage.capacity }}"
    storageClassName: "{{ item_map.storage.class }}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "{{ name }}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "{{ item_map.storage.capacity }}"
    storageClassName: "{{ item_map.storage.class }}"
{% endif %}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: "Route for {{ name }} service."
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "{{ name }}"
    port:
      targetPort: ui
- apiVersion: v1
  kind: Service
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    ports:
    - name: jms
      port: 61616
    - name: ui
      port: 8161
    - name: amqp
      port: 5672
    - name: stomp
      port: 61613
    - name: mqtt
      port: 1883
    - name: ws
      port: 61614
    selector:
      app: "{{ name }}"
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "{{ name }}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    replicas: 1
    selector:
      app: "{{ name }}"
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "{{ name }}"
      spec:
        serviceAccountName: "{{ name }}"
        containers:
        - name: "{{ name }}"
          image: "${SERVICE_IMAGE}:${SERVICE_VERSION}"
          imagePullPolicy: Always
          ports:
            - name: jms
              containerPort: 61616
            - name: ui
              containerPort: 8161
            - name: amqp
              containerPort: 5672
            - name: stomp
              containerPort: 61613
            - name: mqtt
              containerPort: 1883
            - name: ws
              containerPort: 61614
          env:
            - name: ACTIVEMQ_NODENAME
              value: "{{ name }}"
            - name: ACTIVEMQ_ADMIN_LOGIN
              valueFrom:
                secretKeyRef:
                    name: "activemq-secret"
                    key: activemq.username
            - name: ACTIVEMQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: "activemq-secret"
                    key: activemq.password
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 5672
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 5672
            timeoutSeconds: 5
          resources:
            requests:
              memory: 500Mi
          volumeMounts:
            - mountPath: /opt/activemq/conf
              name: "{{ name }}-conf"
            - mountPath: /opt/activemq/data
              name: "{{ name }}-data"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        volumes:
        - name: "{{ name }}-conf"
{% if item_map.storage is defined %}
          persistentVolumeClaim:
            claimName: "{{ name }}-conf"
{% else %}
          emptyDir: {}
{% endif %}
        - name: "{{ name }}-data"
{% if item_map.storage is defined %}
          persistentVolumeClaim:
            claimName: "{{ name }}-data"
{% else %}
          emptyDir: {}
{% endif %}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        initContainers:
          - command:
            - sh
            - '-c'
            - >-
              chown activemq:activemq /mnt/conf && chown activemq:activemq
              /mnt/data && cp -a /opt/activemq/conf/* /mnt/conf/ && cp -a
              /opt/activemq/data/* /mnt/data/
            image: 'rmohr/activemq:5.15.6'
            imagePullPolicy: IfNotPresent
            name: init-activemq
            resources: {}
            securityContext:
              runAsUser: 0
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /mnt/conf
                name: "{{ name }}-conf"
              - mountPath: /mnt/data
                name: "{{ name }}-data"
    triggers:
      - type: ConfigChange
- kind: Secret
  apiVersion: v1
  metadata:
    name: "activemq-secret"
  stringData:
    activemq.username: ${USERNAME}
    activemq.password: ${PASSWORD}
parameters:
- displayName: Service version
  name: SERVICE_VERSION
  required: true
  value: "{{ item_map.version }}"
- displayName: Service image
  name: SERVICE_IMAGE
  required: true
  value: "{{ item_map.image }}"
- displayName: Activemq user
  name: USERNAME
  required: true
  value: "admin"
- displayName: Activemq password
  name: PASSWORD
  required: true
  value: "secret-active"