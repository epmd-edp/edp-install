# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Template
metadata:
  name: "{{ name }}"
  annotations:
    iconClass: "icon-js"
    description: Openshift template for ReactJS application/service deploying
    template.openshift.io/provider-display-name: EPAM
    template.openshift.io/support-url: https://www.epam.com
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    ports:
    - name: "{{ name }}"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "{{ name }}"
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "{{ name }}"
{% if item_map.route %}
- apiVersion: v1
  kind: Route
  metadata:
    name: "{{ name }}"
    annotations:
      description: "Route for {{ name }} application"
    labels:
      app: "{{ name }}"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
{% if item_map.route_site is defined and item_map.route_site != '' %}
    host: {{ item_map.route_site }}-${NAMESPACE}.{{ dns_wildcard }}
{% endif %}
    path: {{ item_map.route_path | default('') }}
    port:
      targetPort: 8080
    to:
      kind: Service
      name: "{{ name }}"
    wildcardPolicy: None
{% endif %}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "{{ name }}"
    labels:
      app: "{{ name }}"
  spec:
    replicas: 1
    selector:
      app: "{{ name }}"
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "{{ name }}"
      spec:
        serviceAccountName: "{{ name }}"
        containers:
        - name: "{{ name }}"
          image: "{{ name }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          resources:
            requests:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          containerNames:
            - "{{ name }}"
          from:
            kind: ImageStreamTag
            name: "{{ name }}:${APP_VERSION}"
            namespace: "${IS_NAMESPACE}"
        type: ImageChange
parameters:
- displayName: Application version
  name: APP_VERSION
  required: true
  value: "latest"
- displayName: Current namespace
  name: NAMESPACE
  required: true
- displayName: ImageStream namespace
  name: IS_NAMESPACE
  required: true