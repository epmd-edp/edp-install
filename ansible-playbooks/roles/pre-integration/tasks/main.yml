# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: "Login to openshift"
  shell: "{{ ocadm }} login -u system:admin"
  register: can_login
  when: ocadm != "oc"

- fail:
    msg: "Sorry, we can't login to the cluster. Check permissions on the cluster's side"
  when: not can_login|skipped and can_login.stdout == "false"

- name: "Get the list of all projects"
  command: "{{ ocadm }} get project --output=custom-columns=NAME:.metadata.name --no-headers"
  register: all_oc_projects

- include_tasks: roles/common/tasks/manage-openshift/create-groups.yml
  with_items:
    - "{{ edp_name }}-edp-super-admin"
    - "{{ edp_name }}-edp-admin"
    - "{{ edp_name }}-edp-view"

- include_tasks: roles/common/tasks/manage-openshift/create-users.yml
  when: item != ""
  with_items:
    - "{{ edp_super_admins }}"
    - "{{ edp_admins }}"
    - "{{ edp_viewers }}"

- include_tasks: roles/common/tasks/manage-openshift/join-users-to-group.yml
  with_items:
    - { group: "{{ edp_name }}-edp-super-admin", users: "{{ (super_admin_users == '') | ternary(default_super_admin, super_admin_users | replace(',', ' ') ) | lower }}" }
    - { group: "{{ edp_name }}-edp-admin", users: "{{ admin_users | replace(',', ' ') | lower }}" }
    - { group: "{{ edp_name }}-edp-view", users: "{{ view_users | replace(',', ' ') | lower }}" }

- name: "Create project in Openshift if it does not exist"
  shell: "{{ ocadm }} new-project {{ item }}"
  when: "item not in all_oc_projects.stdout_lines"
  with_items: "{{ projects_list }}"

- name: "Create rolebinding to existing project"
  shell: "{{ ocadm }} create rolebinding edp-admin --clusterrole=admin --serviceaccount={{ edp_deploy_project }}:edp --namespace={{ project_cicd }}"
  when: "item in all_oc_projects.stdout_lines"
  with_items: "{{ projects_list }}"

- name: "Add Description and Display name to CI/CD project"
  shell: >
    {{ ocadm }} annotate project {{ project_cicd }} --overwrite
    openshift.io/display-name={{ edp_name }}-edp
    openshift.io/description='Version: {{ edp_version.split(':') | last }}'

- name: "Check network plugin"
  shell: "{{ ocadm }} get clusternetwork -o custom-columns=PLUGIN:.pluginName --no-headers=true"
  register: cluster_network_type

- name: "Giving access if multitenant"
  shell: "{{ ocadm }} adm pod-network join-projects --to={{ edp_deploy_project }}Â {{ project_cicd }}"
  when: '"multitenant" in cluster_network_type.stdout'

- name: "Giving admin roles to groups"
  shell: "{{ ocadm }} adm policy add-role-to-group admin {{ item[0] }} -n {{ item[1] }}"
  with_nested:
    - [ "{{ edp_name }}-edp-super-admin", "{{ edp_name }}-edp-admin" ]
    - "{{ projects_list }}"

- name: "Giving view roles to groups"
  shell: "{{ ocadm }} adm policy add-role-to-group view {{ edp_name }}-edp-view -n {{ item }}"
  with_items:
    - "{{ projects_list }}"

- name: "Giving permissions to edp SA for operators"
  shell: >
    {{ ocadm }} create rolebinding operators-admin-role-to-edp-sa
    --clusterrole=admin
    --serviceaccount={{ operators_deploy_project }}:edp
    --namespace={{ project_cicd }}

- name: "Looking for shared secrets"
  shell: >
     {{ ocadm }} get secret -n {{ edp_deploy_project }} -o custom-columns=NAME:.metadata.name
     --no-headers=true | grep {{ shared_secrets_mask }}
  register: edp_shared_secrets
  ignore_errors: true

- name: "Clone shared secrets to CICD project"
  shell: >
    {{ ocadm }} get --export -o yaml secret {{ item }} -n {{ edp_deploy_project }} |
    oc -n {{ project_cicd }} apply -f - &&
    {{ ocadm }} get --export -o yaml secret {{ item }} -n {{ edp_deploy_project }} |
    sed -e 's/{{ item }}/{{ item | regex_replace(shared_secrets_mask) }}/' |
    oc -n {{ project_cicd }} apply -f -
  with_items:
    - "{{ edp_shared_secrets.stdout_lines }}"

- name: "Switching to CICD project"
  shell: "{{ ocadm }} project {{ project_cicd }}"

- name: Creates directory for templates
  file:
    path: "{{ templates_dir }}/{{ item }}"
    state: directory
  with_items:
    - "{{ tools.keys() }}"

- name: Create ConfigMap with secret name and VCS group name URL
  shell: >
    {{ ocadm }} create -n {{ project_cicd }} configmap user-settings
    --from-literal=edp_name={{ edp_name }}
    --from-literal=edp_version={{ edp_version.split(':') | last }}
    --from-literal=dns_wildcard={{ dns_wildcard }}
    --from-literal=perf_integration_enabled={{ perf_integration_enabled }}
    --from-literal=vcs_integration_enabled={{ vcs_integration_enabled }}
    --from-literal=admin_console_url={{ tools.admin_console.web_url }}
    {{ '--from-literal=vcs_group_name_url=' + vcs_group_name if vcs_integration_enabled|bool == true else '' }}
    {{ '--from-literal=vcs_tool_name=' + vcs_tool_name | lower if vcs_integration_enabled|bool == true else '' }}
    {{ '--from-literal=vcs_ssh_port=' + vcs_ssh_port if vcs_integration_enabled|bool == true else '' }}

- name: Create necessery role in default projects
  shell: >
    {{ ocadm }} create clusterrolebinding serviceaccounts-registry-viewer --clusterrole=registry-viewer --group=system:serviceaccounts
  register: result
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'

- name: "Process services templates"
  template:
    src: "{{ item }}"
    dest: "{{ item | regex_replace('^(.*).j2$', '\\1')}}.yaml"
  with_fileglob:
    - "../templates/*.j2"

- name: "Adding templates to Openshift"
  shell: "{{ ocadm }} create -f {{ item }} -n {{ project_cicd }} "
  with_fileglob:
    - "../templates/*.yaml"