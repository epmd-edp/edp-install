# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

--- # Cockpit full installation
- name: "Copy EDP-Cockpit templates"
  template:
    src: "{{ item }}"
    dest: "{{ templates_dir }}/cockpit/{{ item }}"
  with_items:
    - "edp-cockpit.yaml"
    - "app-types.json"
    - "autotest-types.json"
    - "service-types.json"

- name: "Copy msra quickstart configs"
  template:
    src: "msra/{{ item }}"
    dest: "{{ templates_dir }}/cockpit/{{ item }}"
  with_items:
    - "app-quickstart.json"
    - "autotest-quickstart.json"
    - "env-quickstart.json"
    - "service-quickstart.json"
    - "modifiable-service-quickstart.json"

- name: "Set docker image version in add-application template"
  replace:
    path: '{{ item }}'
    regexp: '\${DOCKER_IMAGE}'
    replace: "{{ edp_version }}"
  with_items:
    - '{{ templates_dir }}/add-business-application.yaml'
    - '{{ templates_dir }}/add-autotests.yaml'
    - '{{ templates_dir }}/add-environments.yaml'
    - '{{ templates_dir }}/add-service.yaml'

- name: "Install config map for storing app types. Install config map for storing autotest types.
        Bind role with service account. Upload templates for cockpit"
  shell: "{{ item }}"
  with_items:
    - "{{ ocadm }} -n {{ project_cicd }} create configmap project-types
     --from-file=app-types.json={{ templates_dir }}/cockpit/app-types.json
     --from-file=autotest-types.json={{ templates_dir }}/cockpit/autotest-types.json
     --from-file=service-types.json={{ templates_dir }}/cockpit/service-types.json"
    - "{{ ocadm }} apply -f {{ templates_dir }}/add-business-application.yaml"
    - "{{ ocadm }} apply -f {{ templates_dir }}/add-autotests.yaml"
    - "{{ ocadm }} apply -f {{ templates_dir }}/add-environments.yaml"
    - "{{ ocadm }} apply -f {{ templates_dir }}/add-service.yaml"
  register: result
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'

- name: "Install config map for storing msra quickstart information"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} create configmap msra
    --from-file=app-quickstart.json={{ templates_dir }}/cockpit/app-quickstart.json
    --from-file=autotest-quickstart.json={{ templates_dir }}/cockpit/autotest-quickstart.json
    --from-file=env-quickstart.json={{ templates_dir }}/cockpit/env-quickstart.json
    --from-file=service-quickstart.json={{ templates_dir }}/cockpit/service-quickstart.json
    --from-file=modifiable-service-quickstart.json={{ templates_dir }}/cockpit/modifiable-service-quickstart.json
  register: result
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'

- name: "Install EDP-Cockpit app"
  shell: >
    {{ ocadm }} -n {{ project_cicd }} new-app -f {{ templates_dir }}/cockpit/edp-cockpit.yaml
    -p EDP_COCKPIT_VERSION={{ tools.cockpit.version }}
    -p OPENSHIFT_TRUST_CERTIFICATES={{ tools.cockpit.openshift_trust_certificates }}
  register: result
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'

- name: "Assign necessary permissions for cockpit service account"
  shell: >
    {{ ocadm }} {{ item }}
  with_items:
  - "adm policy add-role-to-user admin system:serviceaccount:{{ project_cicd }}:cockpit -n {{ project_cicd }}"
  - "create clusterrolebinding {{ edp_name }}-edp-cockpit --clusterrole edp-cockpit --serviceaccount={{ project_cicd }}:cockpit --dry-run -o yaml | {{ ocadm }} apply -f -"
  - "adm policy add-scc-to-user anyuid system:serviceaccount:{{ project_cicd }}:cockpit"
  register: result
  changed_when: '"already" not in result.stderr'
  failed_when:
    - 'result.rc != 0'
    - '"already" not in result.stderr'